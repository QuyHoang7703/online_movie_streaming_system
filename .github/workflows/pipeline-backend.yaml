name: OMSS Backend API Pipeline

on:
  push:
    branches:
      - ci/pipeline
    paths:
      - src/**
      - .github/workflows/**
      - 'Dockerfile'
      - 'pom.xml'
      - 'docker-compose.yaml'

env:
  PROFILE: dev

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile Project

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
      GG_Client_ID: ${{ secrets.GG_Client_ID }}
      GG_Client_Secret: ${{ secrets.GG_Client_Secret }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Compile Project
        run: mvn clean compile

  unit-test:
    runs-on: ubuntu-latest
    name: Unit & Integration Test

    container:
      image: maven:3.9.6-eclipse-temurin-17
      options: --network-alias test-runner

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: online_movie_streaming_system_v2
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/online_movie_streaming_system_v2
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
      GG_CLIENT_ID: ${{ secrets.GG_Client_ID }}
      GG_CLIENT_SECRET: ${{ secrets.GG_Client_Secret }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run Tests
        run: mvn clean verify

  build:
    runs-on: ubuntu-latest
    name: Build Project
    needs: [compile, unit-test]

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
      GG_CLIENT_ID: ${{ secrets.GG_Client_ID }}
      GG_CLIENT_SECRET: ${{ secrets.GG_Client_Secret }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build Project
        run: mvn clean package -DskipTests

  build-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
      GG_CLIENT_ID: ${{ secrets.GG_Client_ID }}
      GG_CLIENT_SECRET: ${{ secrets.GG_Client_Secret }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Extract version from pom.xml
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/omss-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/omss-api:0.0.4
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

    deploy:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Copy docker-compose file to VM
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.AZURE_HOST }}
            username: ${{ secrets.AZURE_USER }}
            key: ${{ secrets.AZURE_PRIVATE_KEY }}
            source: "docker-compose.yaml"
            target: "~/"

        - name: SSH and run Docker Compose
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.AZURE_HOST }}
            username: ${{ secrets.AZURE_USER }}
            key: ${{ secrets.AZURE_PRIVATE_KEY }}
            script: |
              cd ~
              docker compose pull
              docker compose up -d
